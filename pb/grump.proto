syntax = "proto3";

package pb;

// The header is the first structure in a Grump message, and contains a set of
// encrypted copies of the message key.
message Header {
  // For each intended recipient of the message, a copy of the message key is
  // added here, encrypted with the HKDF-SHA-512 output of the X25519 shared
  // secret produced with the author's private key and the recipient's public
  // key.
  //
  // The recipients of a message are not identified via metadata. To decrypt a
  // session key, the recipients must iterate through the keys and try
  // decrypting each of them. Unused, random keys may be added to this set to
  // confound additional metadata analysis.
  repeated EncryptedData keys = 1;
}

// The body of the message consists of data packets, which are portions of the
// original message, encrypted with the message key, and using the SHA-512 hash
// of all the bytes in the message which precede it as the authenticated data.
message Packet {
  EncryptedData data = 1;
  bool          last = 2;
}

// The final part of a message is the Ed25519 signature of the SHA-512 hash of
// all bytes in the message which precede the signature's frame.
message Signature {
  bytes signature = 1;
}

// Public keys are stored in the clear.
message PublicKey {
  bytes key = 1; // Ed25519 key
}

// Private keys are stored encrypted with a key derived via scrypt from a
// passphrase.
message PrivateKey {
  uint64           N = 1; // the scrypt parameters
  uint64           r = 2;
  uint64           p = 3;
  bytes         salt = 4;
  EncryptedData  key = 5; // Ed25519 key
}

// Data encrypted with ChaCha290Poly1305.
message EncryptedData {
  bytes nonce      = 1; // a random nonce
  bytes ciphertext = 2; // the ciphertext, including Poly1305 tag
}

// The first half of a handshake.
message HandshakeA {
  bytes nonce = 1; // a random nonce
}

// The second half of a handshake.
message HandshakeB {
  bytes presecret = 1; // ECDH presecret
  bytes signature = 2; // Ed25519 signature of presecret and nonce
}
